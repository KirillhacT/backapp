from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text
from keyboards import menu_kb, start_kb, ikb, ExitReplay
from time import sleep
import random

TOKEN_API = "5330446051:AAEWOOzIukJqBgyI0N5CjRAZv9ooTJaIe5Q"

#–ë–æ—Ç - —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å API telegram
bot = Bot(token=TOKEN_API)
dp = Dispatcher(bot)
stickerExample = "CAACAgIAAxkBAAEH-7xkAkIVDFgDcNq14QbDzcNY1mB91AACAw4AAkD-yUuLHupAbb8sOC4E"
KB = ExitReplay("–ú–µ–Ω—é")()

photos_list = []
with open("photos.txt", encoding='utf-8') as file:
    for i in file:
        photos_list.append(i)
# kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
#one_time_keyboard - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def  send_random_photo():
    random_number = random.randint(0, len(photos_list) - 1)
    return photos_list.pop(random_number)


async def on_startup(_):
    print("–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω")

@dp.message_handler(commands=['start'])
async def echo(message: types.Message):
    text = "–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞"
    await bot.send_sticker(message.from_user.id, sticker=stickerExample)
    await message.answer(text=text, reply_markup=start_kb)
    await message.delete()

@dp.message_handler(Text(equals="–ú–µ–Ω—é"))
async def echo(message: types.Message):
    text = "–ú–µ–Ω—é –±–æ—Ç–∞: "
    await message.answer(text=text, reply_markup=menu_kb)

@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):
    if callback.data == "like":
        await callback.answer("–ë–ª–∞–≥–æ–¥–∞—Ä—é")
        # await bot.send_message(callback.message.chat.id, text="–ë–ª–∞–≥–æ–¥–∞—Ä—é)")
    elif callback.data == "dislike":
        await callback.answer("–ù—É –ª–∞–¥–Ω–æ")
        # await bot.send_message(callback.message.chat.id, text="–ù—É –ª–∞–¥–Ω–æ")
    elif callback.data == "dont_like":
        random_photo = send_random_photo()
        await bot.send_photo(callback.message.chat.id, photo=random_photo, reply_markup=ikb)
        await callback.answer()

@dp.message_handler(Text(equals="–ü–æ–º–æ—â—å"))
async def help(message: types.Message):
    text = "<em>–ü–æ–º–æ—â—å <b>–Ω–∞—Ö–æ–¥–∏—Ç—Å—è</b> –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</em>üòÖ"
    await message.answer(text=text, parse_mode="HTML")
    await bot.send_location(chat_id=message.chat.id, latitude=55, longitude=10, reply_markup=KB)

@dp.message_handler(Text(equals="–í—ã—Ö–æ–¥"))
async def exit(message: types.Message):
    await bot.send_message(message.chat.id, text="–û—Ä–∏–≤–∏–¥–µ—Ä—á–∏", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(Text(equals="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")) #–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–∏
async def send_photo(message: types.Message):
    # await bot.send_photo(chat_id=message.chat.id, photo=photo, caption="–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —ç—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è?", reply_markup=ikb)
    random_photo = send_random_photo()
    await bot.send_photo(message.chat.id, photo=random_photo, reply_markup=ikb)

@dp.message_handler(Text(equals="–°–µ–∫—Ä–µ—Ç"))
async def gen(message: types.Message):
    for i in range(1, 11):
        sleep(0.1)
        await bot.send_message(message.chat.id, text=f"{str(i)}%", reply_markup=ReplyKeyboardRemove())
    sleep(0.5)
    await bot.send_message(message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –µ–±–æ–±–æ)", reply_markup=menu_kb)



if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text
from keyboards import menu_kb, start_kb, ikb, ExitReplay, get_inline_keyboard, cb, ReplyKeyboardMarkup, KeyboardButton
import random
from token import TOKEN

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

TOKEN_API = TOKEN
bot = Bot(token=TOKEN_API)
dp = Dispatcher(bot, storage=MemoryStorage())


#–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ClientStatesGroup(StatesGroup):
    photo = State()
    desc = State()
def get_cancel() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))

@dp.message_handler(commands=['state_machine'], state=None)
async def start_st(message: types.Message):
    await ClientStatesGroup.photo.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ", reply_markup=get_cancel())

@dp.message_handler(lambda message: not message.photo, state=ClientStatesGroup.photo)
async def check_photo(message: types.Message):
    return await message.reply("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")


@dp.message_handler(lambda message: message.photo, content_types=['photo'], state=ClientStatesGroup.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data: #–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        data['photo'] = message.photo[0].file_id
    await ClientStatesGroup.next()
    await message.reply("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º –æ–ø–∏—Å–∞–Ω–∏–µ")

@dp.message_handler(state=ClientStatesGroup.desc)
async def load_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data: #–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        data['desc'] = message.text
    # await ClientStatesGroup.next()
    await message.reply("–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

    async with state.proxy() as data:
        await bot.send_photo(message.chat.id,
                             photo=data["photo"],
                             caption=data["desc"])
    await state.finish()  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º
@dp.message_handler(Text("–û—Ç–º–µ–Ω–∞"))
async def cancel_st(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await message.reply("–û—Ç–º–µ–Ω–∏–ª", reply_markup=menu_kb)
    await state.finish()


admin_id = 1390059189
admin_name = "Kirill"
stickerExample = "CAACAgIAAxkBAAEH-7xkAkIVDFgDcNq14QbDzcNY1mB91AACAw4AAkD-yUuLHupAbb8sOC4E"
KB = ExitReplay("–ú–µ–Ω—é")()
number = 0
photos_list = []
with open("photos.txt", encoding='utf-8') as file:
    for i in file:
        photos_list.append(i)
# kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
#one_time_keyboard - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def send_random_photo():
    random_number = random.randint(0, len(photos_list) - 1)
    return photos_list.pop(random_number)


async def on_startup(_):
    print("–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω")

@dp.message_handler(commands=['start'])
async def echo(message: types.Message):
    text = "–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞"
    await bot.send_sticker(message.from_user.id, sticker=stickerExample)
    await message.answer(text=text, reply_markup=start_kb)
    await message.delete()

@dp.message_handler(Text(equals="–ú–µ–Ω—é"))
async def echo(message: types.Message):
    text = "–ú–µ–Ω—é –±–æ—Ç–∞: "
    await message.answer(text=text, reply_markup=menu_kb)

# @dp.callback_query_handler(lambda call: call.data.startswith('btn'))
@dp.callback_query_handler(cb.filter())
async def ikb_cd_handler(callback: types.CallbackQuery, callback_data: dict) -> None:
    global number
    if callback_data.get('action') == "btn_+":
        number += 1
        await callback.message.edit_text(f"The current number is {number}", reply_markup=get_inline_keyboard())
    elif callback_data.get('action') == "btn_-":
        number -= 1
        await callback.message.edit_text(f"The current number is {number}", reply_markup=get_inline_keyboard())
    elif callback_data.get('action') == "btn_random":
        number = random.randint(1, 100)
        await callback.message.edit_text(f"The current number is {number}", reply_markup=get_inline_keyboard())
@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):
    if callback.data == "like":
        await callback.answer(show_alert=True, text="–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
    elif callback.data == "dislike":
        await callback.answer(show_alert=True, text="–í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
    elif callback.data == "dont_like":
        random_photo = send_random_photo()
        await callback.message.edit_media(types.InputMedia(media=random_photo, type="photo"), reply_markup=ikb)
        await callback.answer()
    elif callback.data == "menu":
        await callback.message.delete()
        await callback.message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_kb)




@dp.message_handler(Text(equals="–ü–æ–º–æ—â—å"))
async def help(message: types.Message):
    text = "<em>–ü–æ–º–æ—â—å <b>–Ω–∞—Ö–æ–¥–∏—Ç—Å—è</b> –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</em>üòÖ"
    await message.answer(text=text, parse_mode="HTML")
    await bot.send_location(chat_id=message.chat.id, latitude=55, longitude=10, reply_markup=KB)

@dp.message_handler(Text(equals="–í—ã—Ö–æ–¥"))
async def exit(message: types.Message):
    await bot.send_message(message.chat.id, text="–û—Ä–∏–≤–∏–¥–µ—Ä—á–∏", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(Text(equals="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")) #–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–∏
async def send_photo(message: types.Message):
    # await bot.send_photo(chat_id=message.chat.id, photo=photo, caption="–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —ç—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è?", reply_markup=ikb)
    random_photo = send_random_photo()
    await message.answer(text="–†–∞–Ω–¥–æ–º–Ω–∞—è —Ñ–æ—Ç–∫–∞!", reply_markup=ReplyKeyboardRemove())
    await bot.send_photo(message.chat.id, photo=random_photo, reply_markup=ikb)


@dp.message_handler(Text(equals="–°—á–µ—Ç—á–∏–∫"))
async def gen(message: types.Message):
    await message.answer(f"The current number is {number}", reply_markup=get_inline_keyboard())

# @dp.message_handler()
# async def question(message: types.Message):
#     user = message.from_user.full_name
#     if user != admin_name:
#         text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user}] –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n{message.text}"
#         await bot.send_message(admin_id, text=text)
#         await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
1) в наш dp в параметр storage прописываем MemoryStorage()
2) Создаем класс для состояний, наследуемые от StatesGroup
и объявляем в нем состояния (exam1 = State())
3) В каждом хендлер-обработчике прописываем атрибут
state, как текущее состояние (state=ClientStatesGroup.photo),
по умолчанию None (Если мы обрабатываем фото добавляем content_types=['photo'])
4) Также функция, привязанная к хендлеру имеет второй атрибут
state: FSMContext

5) Начать прописывать машину нужно с конкретного состояния
await ClientStatesGroup.photo.set()
6) Переключение на следующее состояние осуществляется функц next()
await ClientStatesGroup.next()
7)Заканчиваем работу машины с помощью текущего состояния и метода finish()
await state.finish()

*) Обращение к MemoryStorage осуществляется с помощью асинхронного контекстного менеджера with
и функции proxy у любого состояния через словарь
async with state.proxy() as data:
    data["<нужный атрибут>"] = <значение атрибута>
